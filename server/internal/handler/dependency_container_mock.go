// Code generated by mockery v2.52.2. DO NOT EDIT.

package handler

import (
	usecase "github.com/evrone-erp/mattermost-plugin-welcomebot/server/internal/usecase"
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// MockDependencyContainer is an autogenerated mock type for the DependencyContainer type
type MockDependencyContainer struct {
	mock.Mock
}

type MockDependencyContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDependencyContainer) EXPECT() *MockDependencyContainer_Expecter {
	return &MockDependencyContainer_Expecter{mock: &_m.Mock}
}

// ChannelRepo provides a mock function with no fields
func (_m *MockDependencyContainer) ChannelRepo() usecase.ChannelRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChannelRepo")
	}

	var r0 usecase.ChannelRepo
	if rf, ok := ret.Get(0).(func() usecase.ChannelRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.ChannelRepo)
		}
	}

	return r0
}

// MockDependencyContainer_ChannelRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelRepo'
type MockDependencyContainer_ChannelRepo_Call struct {
	*mock.Call
}

// ChannelRepo is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) ChannelRepo() *MockDependencyContainer_ChannelRepo_Call {
	return &MockDependencyContainer_ChannelRepo_Call{Call: _e.mock.On("ChannelRepo")}
}

func (_c *MockDependencyContainer_ChannelRepo_Call) Run(run func()) *MockDependencyContainer_ChannelRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_ChannelRepo_Call) Return(_a0 usecase.ChannelRepo) *MockDependencyContainer_ChannelRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_ChannelRepo_Call) RunAndReturn(run func() usecase.ChannelRepo) *MockDependencyContainer_ChannelRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ChannelWelcomeRepo provides a mock function with no fields
func (_m *MockDependencyContainer) ChannelWelcomeRepo() usecase.ChannelWelcomeRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChannelWelcomeRepo")
	}

	var r0 usecase.ChannelWelcomeRepo
	if rf, ok := ret.Get(0).(func() usecase.ChannelWelcomeRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.ChannelWelcomeRepo)
		}
	}

	return r0
}

// MockDependencyContainer_ChannelWelcomeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelWelcomeRepo'
type MockDependencyContainer_ChannelWelcomeRepo_Call struct {
	*mock.Call
}

// ChannelWelcomeRepo is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) ChannelWelcomeRepo() *MockDependencyContainer_ChannelWelcomeRepo_Call {
	return &MockDependencyContainer_ChannelWelcomeRepo_Call{Call: _e.mock.On("ChannelWelcomeRepo")}
}

func (_c *MockDependencyContainer_ChannelWelcomeRepo_Call) Run(run func()) *MockDependencyContainer_ChannelWelcomeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_ChannelWelcomeRepo_Call) Return(_a0 usecase.ChannelWelcomeRepo) *MockDependencyContainer_ChannelWelcomeRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_ChannelWelcomeRepo_Call) RunAndReturn(run func() usecase.ChannelWelcomeRepo) *MockDependencyContainer_ChannelWelcomeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// Messenger provides a mock function with no fields
func (_m *MockDependencyContainer) Messenger() usecase.Messenger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messenger")
	}

	var r0 usecase.Messenger
	if rf, ok := ret.Get(0).(func() usecase.Messenger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.Messenger)
		}
	}

	return r0
}

// MockDependencyContainer_Messenger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messenger'
type MockDependencyContainer_Messenger_Call struct {
	*mock.Call
}

// Messenger is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) Messenger() *MockDependencyContainer_Messenger_Call {
	return &MockDependencyContainer_Messenger_Call{Call: _e.mock.On("Messenger")}
}

func (_c *MockDependencyContainer_Messenger_Call) Run(run func()) *MockDependencyContainer_Messenger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_Messenger_Call) Return(_a0 usecase.Messenger) *MockDependencyContainer_Messenger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_Messenger_Call) RunAndReturn(run func() usecase.Messenger) *MockDependencyContainer_Messenger_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommandMessenger provides a mock function with given fields: _a0
func (_m *MockDependencyContainer) NewCommandMessenger(_a0 *model.CommandArgs) usecase.CommandMessenger {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewCommandMessenger")
	}

	var r0 usecase.CommandMessenger
	if rf, ok := ret.Get(0).(func(*model.CommandArgs) usecase.CommandMessenger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.CommandMessenger)
		}
	}

	return r0
}

// MockDependencyContainer_NewCommandMessenger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCommandMessenger'
type MockDependencyContainer_NewCommandMessenger_Call struct {
	*mock.Call
}

// NewCommandMessenger is a helper method to define mock.On call
//   - _a0 *model.CommandArgs
func (_e *MockDependencyContainer_Expecter) NewCommandMessenger(_a0 interface{}) *MockDependencyContainer_NewCommandMessenger_Call {
	return &MockDependencyContainer_NewCommandMessenger_Call{Call: _e.mock.On("NewCommandMessenger", _a0)}
}

func (_c *MockDependencyContainer_NewCommandMessenger_Call) Run(run func(_a0 *model.CommandArgs)) *MockDependencyContainer_NewCommandMessenger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CommandArgs))
	})
	return _c
}

func (_c *MockDependencyContainer_NewCommandMessenger_Call) Return(_a0 usecase.CommandMessenger) *MockDependencyContainer_NewCommandMessenger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_NewCommandMessenger_Call) RunAndReturn(run func(*model.CommandArgs) usecase.CommandMessenger) *MockDependencyContainer_NewCommandMessenger_Call {
	_c.Call.Return(run)
	return _c
}

// Policy provides a mock function with no fields
func (_m *MockDependencyContainer) Policy() usecase.Policy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Policy")
	}

	var r0 usecase.Policy
	if rf, ok := ret.Get(0).(func() usecase.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.Policy)
		}
	}

	return r0
}

// MockDependencyContainer_Policy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Policy'
type MockDependencyContainer_Policy_Call struct {
	*mock.Call
}

// Policy is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) Policy() *MockDependencyContainer_Policy_Call {
	return &MockDependencyContainer_Policy_Call{Call: _e.mock.On("Policy")}
}

func (_c *MockDependencyContainer_Policy_Call) Run(run func()) *MockDependencyContainer_Policy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_Policy_Call) Return(_a0 usecase.Policy) *MockDependencyContainer_Policy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_Policy_Call) RunAndReturn(run func() usecase.Policy) *MockDependencyContainer_Policy_Call {
	_c.Call.Return(run)
	return _c
}

// TeamRepo provides a mock function with no fields
func (_m *MockDependencyContainer) TeamRepo() usecase.TeamRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TeamRepo")
	}

	var r0 usecase.TeamRepo
	if rf, ok := ret.Get(0).(func() usecase.TeamRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.TeamRepo)
		}
	}

	return r0
}

// MockDependencyContainer_TeamRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamRepo'
type MockDependencyContainer_TeamRepo_Call struct {
	*mock.Call
}

// TeamRepo is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) TeamRepo() *MockDependencyContainer_TeamRepo_Call {
	return &MockDependencyContainer_TeamRepo_Call{Call: _e.mock.On("TeamRepo")}
}

func (_c *MockDependencyContainer_TeamRepo_Call) Run(run func()) *MockDependencyContainer_TeamRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_TeamRepo_Call) Return(_a0 usecase.TeamRepo) *MockDependencyContainer_TeamRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_TeamRepo_Call) RunAndReturn(run func() usecase.TeamRepo) *MockDependencyContainer_TeamRepo_Call {
	_c.Call.Return(run)
	return _c
}

// TeamWelcomeRepo provides a mock function with no fields
func (_m *MockDependencyContainer) TeamWelcomeRepo() usecase.TeamWelcomeRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TeamWelcomeRepo")
	}

	var r0 usecase.TeamWelcomeRepo
	if rf, ok := ret.Get(0).(func() usecase.TeamWelcomeRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.TeamWelcomeRepo)
		}
	}

	return r0
}

// MockDependencyContainer_TeamWelcomeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamWelcomeRepo'
type MockDependencyContainer_TeamWelcomeRepo_Call struct {
	*mock.Call
}

// TeamWelcomeRepo is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) TeamWelcomeRepo() *MockDependencyContainer_TeamWelcomeRepo_Call {
	return &MockDependencyContainer_TeamWelcomeRepo_Call{Call: _e.mock.On("TeamWelcomeRepo")}
}

func (_c *MockDependencyContainer_TeamWelcomeRepo_Call) Run(run func()) *MockDependencyContainer_TeamWelcomeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_TeamWelcomeRepo_Call) Return(_a0 usecase.TeamWelcomeRepo) *MockDependencyContainer_TeamWelcomeRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_TeamWelcomeRepo_Call) RunAndReturn(run func() usecase.TeamWelcomeRepo) *MockDependencyContainer_TeamWelcomeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// UserRepo provides a mock function with no fields
func (_m *MockDependencyContainer) UserRepo() usecase.UserRepo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserRepo")
	}

	var r0 usecase.UserRepo
	if rf, ok := ret.Get(0).(func() usecase.UserRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.UserRepo)
		}
	}

	return r0
}

// MockDependencyContainer_UserRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRepo'
type MockDependencyContainer_UserRepo_Call struct {
	*mock.Call
}

// UserRepo is a helper method to define mock.On call
func (_e *MockDependencyContainer_Expecter) UserRepo() *MockDependencyContainer_UserRepo_Call {
	return &MockDependencyContainer_UserRepo_Call{Call: _e.mock.On("UserRepo")}
}

func (_c *MockDependencyContainer_UserRepo_Call) Run(run func()) *MockDependencyContainer_UserRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDependencyContainer_UserRepo_Call) Return(_a0 usecase.UserRepo) *MockDependencyContainer_UserRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyContainer_UserRepo_Call) RunAndReturn(run func() usecase.UserRepo) *MockDependencyContainer_UserRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDependencyContainer creates a new instance of MockDependencyContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDependencyContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDependencyContainer {
	mock := &MockDependencyContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
