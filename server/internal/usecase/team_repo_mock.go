// Code generated by mockery v2.53.0. DO NOT EDIT.

package usecase

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTeamRepo is an autogenerated mock type for the TeamRepo type
type MockTeamRepo struct {
	mock.Mock
}

type MockTeamRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamRepo) EXPECT() *MockTeamRepo_Expecter {
	return &MockTeamRepo_Expecter{mock: &_m.Mock}
}

// GetByTeamID provides a mock function with given fields: _a0
func (_m *MockTeamRepo) GetByTeamID(_a0 string) (*model.Team, *model.AppError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeamID")
	}

	var r0 *model.Team
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.Team, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockTeamRepo_GetByTeamID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeamID'
type MockTeamRepo_GetByTeamID_Call struct {
	*mock.Call
}

// GetByTeamID is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTeamRepo_Expecter) GetByTeamID(_a0 interface{}) *MockTeamRepo_GetByTeamID_Call {
	return &MockTeamRepo_GetByTeamID_Call{Call: _e.mock.On("GetByTeamID", _a0)}
}

func (_c *MockTeamRepo_GetByTeamID_Call) Run(run func(_a0 string)) *MockTeamRepo_GetByTeamID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTeamRepo_GetByTeamID_Call) Return(_a0 *model.Team, _a1 *model.AppError) *MockTeamRepo_GetByTeamID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepo_GetByTeamID_Call) RunAndReturn(run func(string) (*model.Team, *model.AppError)) *MockTeamRepo_GetByTeamID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTeamName provides a mock function with given fields: _a0
func (_m *MockTeamRepo) GetByTeamName(_a0 string) (*model.Team, *model.AppError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeamName")
	}

	var r0 *model.Team
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.Team, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockTeamRepo_GetByTeamName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeamName'
type MockTeamRepo_GetByTeamName_Call struct {
	*mock.Call
}

// GetByTeamName is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTeamRepo_Expecter) GetByTeamName(_a0 interface{}) *MockTeamRepo_GetByTeamName_Call {
	return &MockTeamRepo_GetByTeamName_Call{Call: _e.mock.On("GetByTeamName", _a0)}
}

func (_c *MockTeamRepo_GetByTeamName_Call) Run(run func(_a0 string)) *MockTeamRepo_GetByTeamName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTeamRepo_GetByTeamName_Call) Return(_a0 *model.Team, _a1 *model.AppError) *MockTeamRepo_GetByTeamName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepo_GetByTeamName_Call) RunAndReturn(run func(string) (*model.Team, *model.AppError)) *MockTeamRepo_GetByTeamName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamRepo creates a new instance of MockTeamRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamRepo {
	mock := &MockTeamRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
