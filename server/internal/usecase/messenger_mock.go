// Code generated by mockery v2.53.0. DO NOT EDIT.

package usecase

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// MockMessenger is an autogenerated mock type for the Messenger type
type MockMessenger struct {
	mock.Mock
}

type MockMessenger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessenger) EXPECT() *MockMessenger_Expecter {
	return &MockMessenger_Expecter{mock: &_m.Mock}
}

// Post provides a mock function with given fields: channelID, message
func (_m *MockMessenger) Post(channelID string, message string) *model.AppError {
	ret := _m.Called(channelID, message)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) *model.AppError); ok {
		r0 = rf(channelID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockMessenger_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockMessenger_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - channelID string
//   - message string
func (_e *MockMessenger_Expecter) Post(channelID interface{}, message interface{}) *MockMessenger_Post_Call {
	return &MockMessenger_Post_Call{Call: _e.mock.On("Post", channelID, message)}
}

func (_c *MockMessenger_Post_Call) Run(run func(channelID string, message string)) *MockMessenger_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMessenger_Post_Call) Return(_a0 *model.AppError) *MockMessenger_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessenger_Post_Call) RunAndReturn(run func(string, string) *model.AppError) *MockMessenger_Post_Call {
	_c.Call.Return(run)
	return _c
}

// PostChannelEphemeral provides a mock function with given fields: channelID, userID, message
func (_m *MockMessenger) PostChannelEphemeral(channelID string, userID string, message string) {
	_m.Called(channelID, userID, message)
}

// MockMessenger_PostChannelEphemeral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostChannelEphemeral'
type MockMessenger_PostChannelEphemeral_Call struct {
	*mock.Call
}

// PostChannelEphemeral is a helper method to define mock.On call
//   - channelID string
//   - userID string
//   - message string
func (_e *MockMessenger_Expecter) PostChannelEphemeral(channelID interface{}, userID interface{}, message interface{}) *MockMessenger_PostChannelEphemeral_Call {
	return &MockMessenger_PostChannelEphemeral_Call{Call: _e.mock.On("PostChannelEphemeral", channelID, userID, message)}
}

func (_c *MockMessenger_PostChannelEphemeral_Call) Run(run func(channelID string, userID string, message string)) *MockMessenger_PostChannelEphemeral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMessenger_PostChannelEphemeral_Call) Return() *MockMessenger_PostChannelEphemeral_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMessenger_PostChannelEphemeral_Call) RunAndReturn(run func(string, string, string)) *MockMessenger_PostChannelEphemeral_Call {
	_c.Run(run)
	return _c
}

// PostDirect provides a mock function with given fields: channelID, message
func (_m *MockMessenger) PostDirect(channelID string, message string) *model.AppError {
	ret := _m.Called(channelID, message)

	if len(ret) == 0 {
		panic("no return value specified for PostDirect")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) *model.AppError); ok {
		r0 = rf(channelID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockMessenger_PostDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDirect'
type MockMessenger_PostDirect_Call struct {
	*mock.Call
}

// PostDirect is a helper method to define mock.On call
//   - channelID string
//   - message string
func (_e *MockMessenger_Expecter) PostDirect(channelID interface{}, message interface{}) *MockMessenger_PostDirect_Call {
	return &MockMessenger_PostDirect_Call{Call: _e.mock.On("PostDirect", channelID, message)}
}

func (_c *MockMessenger_PostDirect_Call) Run(run func(channelID string, message string)) *MockMessenger_PostDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMessenger_PostDirect_Call) Return(_a0 *model.AppError) *MockMessenger_PostDirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessenger_PostDirect_Call) RunAndReturn(run func(string, string) *model.AppError) *MockMessenger_PostDirect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessenger creates a new instance of MockMessenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessenger {
	mock := &MockMessenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
