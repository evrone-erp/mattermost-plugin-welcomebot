// Code generated by mockery v2.52.1. DO NOT EDIT.

package usecase

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// MockChannelRepo is an autogenerated mock type for the ChannelRepo type
type MockChannelRepo struct {
	mock.Mock
}

type MockChannelRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelRepo) EXPECT() *MockChannelRepo_Expecter {
	return &MockChannelRepo_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0
func (_m *MockChannelRepo) Get(_a0 string) (*model.Channel, *model.AppError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Channel
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.Channel, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockChannelRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockChannelRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
func (_e *MockChannelRepo_Expecter) Get(_a0 interface{}) *MockChannelRepo_Get_Call {
	return &MockChannelRepo_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *MockChannelRepo_Get_Call) Run(run func(_a0 string)) *MockChannelRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelRepo_Get_Call) Return(_a0 *model.Channel, _a1 *model.AppError) *MockChannelRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelRepo_Get_Call) RunAndReturn(run func(string) (*model.Channel, *model.AppError)) *MockChannelRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirect provides a mock function with given fields: _a0
func (_m *MockChannelRepo) GetDirect(_a0 string) (*model.Channel, *model.AppError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDirect")
	}

	var r0 *model.Channel
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.Channel, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockChannelRepo_GetDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirect'
type MockChannelRepo_GetDirect_Call struct {
	*mock.Call
}

// GetDirect is a helper method to define mock.On call
//   - _a0 string
func (_e *MockChannelRepo_Expecter) GetDirect(_a0 interface{}) *MockChannelRepo_GetDirect_Call {
	return &MockChannelRepo_GetDirect_Call{Call: _e.mock.On("GetDirect", _a0)}
}

func (_c *MockChannelRepo_GetDirect_Call) Run(run func(_a0 string)) *MockChannelRepo_GetDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelRepo_GetDirect_Call) Return(_a0 *model.Channel, _a1 *model.AppError) *MockChannelRepo_GetDirect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelRepo_GetDirect_Call) RunAndReturn(run func(string) (*model.Channel, *model.AppError)) *MockChannelRepo_GetDirect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelRepo creates a new instance of MockChannelRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelRepo {
	mock := &MockChannelRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
