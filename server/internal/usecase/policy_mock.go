// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import mock "github.com/stretchr/testify/mock"

// MockPolicy is an autogenerated mock type for the Policy type
type MockPolicy struct {
	mock.Mock
}

type MockPolicy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicy) EXPECT() *MockPolicy_Expecter {
	return &MockPolicy_Expecter{mock: &_m.Mock}
}

// CanManageChannel provides a mock function with given fields: userID, channelID
func (_m *MockPolicy) CanManageChannel(userID string, channelID string) bool {
	ret := _m.Called(userID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for CanManageChannel")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPolicy_CanManageChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanManageChannel'
type MockPolicy_CanManageChannel_Call struct {
	*mock.Call
}

// CanManageChannel is a helper method to define mock.On call
//   - userID string
//   - channelID string
func (_e *MockPolicy_Expecter) CanManageChannel(userID interface{}, channelID interface{}) *MockPolicy_CanManageChannel_Call {
	return &MockPolicy_CanManageChannel_Call{Call: _e.mock.On("CanManageChannel", userID, channelID)}
}

func (_c *MockPolicy_CanManageChannel_Call) Run(run func(userID string, channelID string)) *MockPolicy_CanManageChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPolicy_CanManageChannel_Call) Return(_a0 bool) *MockPolicy_CanManageChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicy_CanManageChannel_Call) RunAndReturn(run func(string, string) bool) *MockPolicy_CanManageChannel_Call {
	_c.Call.Return(run)
	return _c
}

// IsSysadmin provides a mock function with given fields: userID
func (_m *MockPolicy) IsSysadmin(userID string) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsSysadmin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPolicy_IsSysadmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSysadmin'
type MockPolicy_IsSysadmin_Call struct {
	*mock.Call
}

// IsSysadmin is a helper method to define mock.On call
//   - userID string
func (_e *MockPolicy_Expecter) IsSysadmin(userID interface{}) *MockPolicy_IsSysadmin_Call {
	return &MockPolicy_IsSysadmin_Call{Call: _e.mock.On("IsSysadmin", userID)}
}

func (_c *MockPolicy_IsSysadmin_Call) Run(run func(userID string)) *MockPolicy_IsSysadmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPolicy_IsSysadmin_Call) Return(_a0 bool) *MockPolicy_IsSysadmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicy_IsSysadmin_Call) RunAndReturn(run func(string) bool) *MockPolicy_IsSysadmin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicy creates a new instance of MockPolicy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicy {
	mock := &MockPolicy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
